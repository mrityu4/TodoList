{"version":3,"sources":["form.js","Todo.js","Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Taskform","props","state","todo","handleSubmit","bind","handleChange","evt","this","setState","target","name","value","preventDefault","create","className","onSubmit","htmlFor","type","placeholder","id","onChange","Component","Todo","editing","task","complete","handleRemove","handleModification","handleUpdate","handletoggle","handleCompletion","console","log","remove","a","b","update","toggle","element","CSSTransition","timeout","classNames","onClick","class","TransitionGroup","completed","Todolist","todos","createTodo","toggleCompletion","recvdTask","newTask","uuid","finished","filter","t","newstate","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0420174a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport  \"./todo.css\";\r\nexport default class Taskform extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={todo:\"\"};\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n        this.handleChange=this.handleChange.bind(this)\r\n    } \r\n\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]:evt.target.value\r\n        })\r\n    }\r\n\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.create({...this.state});\r\n        this.setState({\r\n            todo:\"\"\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"task\">Create task</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"todo\"\r\n                        placeholder=\"New Todo\"\r\n                        value={this.state.todo}\r\n                        id=\"todo\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <button>Add Todo</button>\r\n                   \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./todo.css\";\r\n\r\nexport default class Todo extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={editing:false,task:this.props.todo,complete:this.props.complete}\r\n        this.handleRemove=this.handleRemove.bind(this)\r\n        this.handleModification=this.handleModification.bind(this)\r\n        this.handleUpdate=this.handleUpdate.bind(this)\r\n        this.handletoggle=this.handletoggle.bind(this)\r\n        this.handleChange=this.handleChange.bind(this)\r\n        this.handleCompletion=this.handleCompletion.bind(this)\r\n    }\r\n    handleRemove(){\r\n        console.log()\r\n        this.props.remove(this.props.id)\r\n    }\r\n    handleUpdate(a,b){\r\n        this.props.update(a,b)\r\n    }\r\n    handleChange(evt){\r\n        this.setState({  [evt.target.name]:evt.target.value})\r\n    }\r\n    handleModification(evt){\r\n        evt.preventDefault()\r\n        this.handleUpdate(this.props.id,this.state.task)\r\n        this.handletoggle()    \r\n    }\r\n    handletoggle(){\r\n        this.setState({\r\n            editing:!this.state.editing\r\n        })\r\n    }\r\n    handleCompletion(){\r\n        this.setState({complete:!this.state.complete})\r\n        this.props.toggle(this.props.id)\r\n    }\r\n    render() {\r\n        let element;\r\n        if(this.state.editing){\r\n            element=\r\n            <CSSTransition key='editing' timeout={500} classNames='form'>\r\n            <form className='Todo-edit-form' onSubmit={this.handleModification}>\r\n                <input \r\n                type=\"text\"\r\n                name=\"task\"\r\n                value={this.state.task}\r\n                onChange={this.handleChange}  \r\n                />\r\n                <button>DONE</button>\r\n            </form>\r\n            </CSSTransition>\r\n        }\r\n        else {\r\n            element= \r\n            <div>\r\n            <CSSTransition key='normal' timeout={500} classNames='task-text'>\r\n            <div className='Todo-task' className={this.state.complete && \"complete\"} >\r\n            <li onClick={this.handleCompletion}>{this.props.todo}</li>\r\n            </div>\r\n            </CSSTransition>\r\n            <span className='Todo-buttons'>\r\n            <button onClick={this.handletoggle}><i class='fas fa-pen' /></button>\r\n            <button onClick={this.handleRemove}><i class='fas fa-trash' /></button>\r\n            </span>\r\n            </div>\r\n           \r\n        }\r\n        return (\r\n            <TransitionGroup\r\n            className={this.props.completed ? \"Todo completed\" : \"Todo\"}\r\n          >\r\n          {element}\r\n          </TransitionGroup>    \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Taskform from \"./form\";\r\nimport Todo from './Todo'\r\nimport { v4 as uuid } from 'uuid';\r\nimport  \"./Todolist.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { todos: [] };\r\n        this.createTodo = this.createTodo.bind(this)\r\n        this.remove = this.remove.bind(this)\r\n        this.update = this.update.bind(this)\r\n        this.toggleCompletion=this.toggleCompletion.bind(this)\r\n    }\r\n    createTodo(recvdTask) {\r\n        const newTask = { ...recvdTask, id: uuid(), finished: false, complete: false }\r\n        this.setState({ todos: [...this.state.todos, newTask] });\r\n    }\r\n    remove(id) {\r\n        console.log(id,this.state)\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => (t.id !== id))\r\n        })\r\n        console.log(this.state)\r\n    }\r\n    update(id, t) {\r\n\r\n        const newstate = this.state.todos.map(task => {\r\n            if (task.id == id)\r\n                return { ...task, todo: t }\r\n            else return task\r\n        }\r\n        )\r\n        this.setState({ todos: newstate });\r\n    }\r\n    toggleCompletion(id){\r\n        const newstate = this.state.todos.map(task => {\r\n            if (task.id == id)\r\n                return { ...task, complete: !task.complete }\r\n            else return task\r\n        }\r\n        )\r\n        this.setState({ todos: newstate });\r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map(task => <Todo\r\n            id={task.id}\r\n            key={task.id} \r\n            todo={task.todo} \r\n            complete={task.complete}\r\n            toggle={this.toggleCompletion} \r\n            remove={this.remove} \r\n            update={this.update} />)\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>Todo! <span>A Simple React TodoList</span></h1>\r\n                <Taskform create={this.createTodo} />\r\n                <TransitionGroup className='todo-list'>{todos}</TransitionGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Todolist from './Todolist'\nfunction App() {\n  return (\n    <div >\n      < Todolist/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}